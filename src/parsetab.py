
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AD_ASSIGN AND ARROW BAND_ASSIGN BOOL BOR_ASSIGN BREAK BXOR_ASSIGN CHAR CONTINUE DO DOUBLE DV_ASSIGN ELSE EQ FLOAT FOR GE IDENTIFIER IF INT LE LSH LSH_ASSIGN MD_ASSIGN MN_ASSIGN MT_ASSIGN NE NOT NUMBER OR RETURN RSH RSH_ASSIGN SADD SMINUS STRING VOID WHILE\n    expression : expression '+' term\n               | expression '-' term\n    term       : term '*' factor\n               | term '/' factor\n    expression : termterm : factorfactor : NUMBER\n    factor : '(' expression ')'\n    "
    
_lr_action_items = {'NUMBER':([0,5,6,7,8,9,],[4,4,4,4,4,4,]),'(':([0,5,6,7,8,9,],[5,5,5,5,5,5,]),'$end':([1,2,3,4,11,12,13,14,15,],[0,-5,-6,-7,-1,-2,-3,-4,-8,]),'+':([1,2,3,4,10,11,12,13,14,15,],[6,-5,-6,-7,6,-1,-2,-3,-4,-8,]),'-':([1,2,3,4,10,11,12,13,14,15,],[7,-5,-6,-7,7,-1,-2,-3,-4,-8,]),')':([2,3,4,10,11,12,13,14,15,],[-5,-6,-7,15,-1,-2,-3,-4,-8,]),'*':([2,3,4,11,12,13,14,15,],[8,-6,-7,8,8,-3,-4,-8,]),'/':([2,3,4,11,12,13,14,15,],[9,-6,-7,9,9,-3,-4,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,5,],[1,10,]),'term':([0,5,6,7,],[2,2,11,12,]),'factor':([0,5,6,7,8,9,],[3,3,3,3,13,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression + term','expression',3,'p_binary_operators','CParser.py',9),
  ('expression -> expression - term','expression',3,'p_binary_operators','CParser.py',10),
  ('term -> term * factor','term',3,'p_binary_operators','CParser.py',11),
  ('term -> term / factor','term',3,'p_binary_operators','CParser.py',12),
  ('expression -> term','expression',1,'p_expression_term','CParser.py',25),
  ('term -> factor','term',1,'p_term_factor','CParser.py',29),
  ('factor -> NUMBER','factor',1,'p_factor_num','CParser.py',33),
  ('factor -> ( expression )','factor',3,'p_factor_expr','CParser.py',38),
]
